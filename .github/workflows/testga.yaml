name: ci
on: [push]
jobs:
  matrix:
    # Generate matrix for linting (essentially locating all Dockerfile directories)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-dockerfiles.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2 
    - id: set-dockerfiles
      run: |
        #echo "::set-output name=matrix::$(./paths_to_dockerfile.sh | jq .)"
        #echo "::set-output name=matrix::{\"dockerfiles\":[\"./aiidalab/Dockerfile\"]}"
        #PATHS_TO_DOCKERFILE=`find -name Dockerfile | jq -R -s 'split("\n")[:-1]'`
        #export MAT="{\\\"dockerfiles\\\": ${PATHS_TO_DOCKERFILE//\"/\\\"}}"
        #echo $MAT
        #PATHS_TO_DOCKERFILE=$(echo {\"dockerfiles\": $(find -name Dockerfile | jq -R -s 'split("\n")[:-1]')})
        PATHS_TO_DOCKERFILE='{"dockerfiles": [ "./Dockerfile", "./dir3/Dockerfile", "./dir1/Dockerfile", "./dir2/Dockerfile" ]}'
        #echo "::set-output name=matrix::$(echo ${PATHS_TO_DOCKERFILE//\"/\\\"})"
        PATHS_TO_DOCKERFILE={\"dockerfiles\": [ \"./Dockerfile\", \"./dir3/Dockerfile\", \"./dir1/Dockerfile\", \"./dir2/Dockerfile\" ]}
        echo "::set-output name=matrix::$(echo $PATHS_TO_DOCKERFILE)"
        
  check-matrix:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix: ${{fromJSON(needs.matrix.outputs.matrix)}}
    # Only run of there are Dockerfiles present
    #if: "join(fromJSON(needs.matrix.outputs.matrix), '') != ''"
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      - name: Check matrix definition
        run: echo ${{ matrix }}

  build-push:
    runs-on: ubuntu-latest
    steps: 
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1 
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v2    
        id: docker_build
        with:
          push: true
          tags: thtb2access/testga:1.0
      - run: echo ${{ steps.docker_build.outputs.digest }}     
